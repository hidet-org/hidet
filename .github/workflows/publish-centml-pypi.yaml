name: Publish to CentML Internal PyPI

on:
  workflow_dispatch:
    inputs:
      gcp_project:
        description: 'GCP project'
        required: true
      gcp_region:
        description: 'GCP region'
        required: true
      target:
        description: 'target pypi index'
        required: true
      delete_previous:
        description: 'delete previous build'
        required: true
        default: "false"
      manual_version:
        description: 'manual version'
        required: true
        default: '0.5.0.dev'
      skip_tests:
        description: 'skip tests'
        required: false
        default: 'false'

jobs:

  build-wheel:
    outputs:
      wheel_name: ${{ steps.build_step.outputs.wheel_name }}
      version: ${{ steps.get_version.outputs.VERSION }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Get the version
        id: get_version
        run: echo "VERSION=${{ github.event.inputs.manual_version }}" >> $GITHUB_OUTPUT

      - name: Build Hidet Wheel
        id: build_step
        uses: ./.github/actions/build-wheel
        with:
          version: ${{ github.event.inputs.manual_version }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_step.outputs.wheel_name }}
          path: ${{ steps.build_step.outputs.wheel_path }}
          retention-days: 1
          if-no-files-found: "error"

  list-test-dirs:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:

      - name: Checkout Hidet
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - id: set-matrix
        run: |
          python .github/scripts/set_test_matrix.py

  run-tests:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip_tests == 'false' }}
    name: Release Tests
    needs: [list-test-dirs, build-wheel]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.list-test-dirs.outputs.matrix) }}
    runs-on:
      group: 'arc-l4'
    container:
      image: nvidia/cuda:12.4.0-devel-ubuntu20.04
    steps:
      - name: Install dependencies via apt
        run: |
          apt update && DEBIAN_FRONTEND=noninteractive apt install -y ccache git graphviz

      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-wheel.outputs.wheel_name }}

      - name: Setup Hidet from Wheel
        run: |
          pip install -r requirements-dev.txt
          pip install ${{ needs.build-wheel.outputs.wheel_name }}
  
      - name: List installed packages
        run: |
          pip list

      - name: Run tests
        run: |
          rm -rf ~/.config/hidet
          python -m pytest -v --durations=20 --clear-cache ${{ matrix.path }}

  publish:
    name: Publish to PyPI
    needs: [run-tests, build-wheel]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:

      - name: Handle test failure
        if: ${{ needs.run-tests.result == 'failure' }}
        run: |
          echo "Job run-tests failed, skipping push to pypi."
          exit 1

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-wheel.outputs.wheel_name }}
          path: dist

      - name: Show the wheel
        run: |
          ls -l
    
      - id: "auth"
        uses: "google-github-actions/auth@v2"
        env:
          PROJECT_ID: ${{ github.event.inputs.gcp_project }}
          REGION: ${{ github.event.inputs.gcp_region }}
          GAR_LOCATION: "${{ github.event.inputs.gcp_region }}-python.pkg.dev/${{ github.event.inputs.gcp_project }}/${{ github.event.inputs.target }}"
        with:
          credentials_json: ${{ secrets.GCP_HIDET_DEV_SA_KEY }}
  
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Delete previous version if specified
        if: ${{ github.event.inputs.delete_previous == 'true' }}
        continue-on-error: true
        run: |
          gcloud artifacts versions delete ${{ needs.build-wheel.outputs.version }} \
            --project ${{ github.event.inputs.gcp_project }} \
            --location ${{ github.event.inputs.gcp_region }}  \
            --repository ${{ github.event.inputs.target }} \
            --package=hidet\
            --quiet
    
      - name: "GAR auth and push"
        env:
          PROJECT_ID: ${{ github.event.inputs.gcp_project }}
          REGION: ${{ github.event.inputs.gcp_region }}
          PYTHON_REPO: ${{ github.event.inputs.target }}
          VERSION:  ${{ needs.build-wheel.outputs.version }}
        run: |-
          gcloud config set artifacts/repository ${{ env.PYTHON_REPO }}
          gcloud config set artifacts/location ${{ env.REGION }}
          pip3 install twine keyring keyrings.google-artifactregistry-auth
          gcloud artifacts print-settings python --project=${{ env.PROJECT_ID }} \
            --repository=${{ env.PYTHON_REPO }} \
            --location=${{ env.REGION }} > ~/.pypirc
          ls dist/*
          cat ~/.pypirc
          python3 -m twine upload --repository-url https://${{ env.REGION }}-python.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PYTHON_REPO }}/ dist/*
  