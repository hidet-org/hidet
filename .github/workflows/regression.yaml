name: Regression

on:
  workflow_dispatch:
    inputs:
      shutdown_instances:
        description: 'Shut down GPU instances when finished.'
        required: true
        type: boolean
        default: true
      source_repo:
        description: 'Source Repository Name. E.g, hidet-org/hidet'
        required: true
        type: string
        default: 'this'
      source_ref:
        description: 'Source repository ref (Branch name or PR number).'
        required: true
        type: string
        default: 'this'

jobs:
  start_instances:
    runs-on: ubuntu-latest
    outputs:
      started_instances: ${{ steps.run_py_script.outputs.started_instances }}
      hw_configs: ${{ steps.run_py_script.outputs.hw_configs }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: pip install mysql-connector-python

      - name: Run main Python script
        id: run_py_script
        run: timeout 900 python ./.github/scripts/start_instances.py
        env:
          # TODO: Allow launching only specified GPU instances
          HW_CONFIG: all
          REPO_NAME: ${{ github.repository }}
          CI_DB_HOSTNAME: ${{ secrets.CI_DB_HOSTNAME }}
          CI_DB_PORT: ${{ secrets.CI_DB_PORT }}
          CI_DB_USERNAME: ${{ secrets.CI_DB_USERNAME }}
          CI_DB_PASSWORD: ${{ secrets.CI_DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
      
      - name: Upload run configs
        uses: actions/upload-artifact@v3
        with:
          name: run_configs
          path: run_configs.json
          retention-days: 1

  run_tests:
    needs: start_instances
    timeout-minutes: 2880
    strategy:
      matrix:
        hw_configs: ${{ fromJSON(needs.start_instances.outputs.hw_configs) }}
    runs-on: ${{ matrix.hw_configs }}
    outputs:
      commit_time: ${{ steps.get_commit_info.outputs.commit_time }}
      commit_author: ${{ steps.get_commit_info.outputs.commit_author }}
      commit_sha: ${{ steps.get_commit_info.outputs.commit_sha }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: |
            ${{ inputs.source_repo == 'this' && github.repository ||
            inputs.source_repo }}
          ref: |
            ${{ inputs.source_repo == 'this' && github.ref_name || 
            format('refs/pull/{0}/head', inputs.source_ref) }}
          path: hidet

      - name: Checkout models
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MODEL_REPO }}
          token: ${{ secrets.GH_PAT }}
          path: models
          ref: ci

      - name: Download run configs
        uses: actions/download-artifact@v3
        with:
          name: run_configs
          path: ./mount
        
      # Build the image
      - name: Build docker image from base image
        run: docker build -t hidet-ci -f hidet/.github/Dockerfile .
      
      # Run the tests in the container. Container should write output to host file
      - name: Run Docker with slurm
        timeout-minutes: 2880
        run: >
          srun --gpus 1 -c 8 bash -c 'docker run --privileged
          --gpus all --ipc=host --ulimit memlock=-1 --ulimit stack=-1
          -e CUDA_VISIBLE_DEVICES=$SLURM_STEP_GPUS
          -e HW_CONFIG -e REPO_NAME -e REPO_BRANCH -e CI_CS_HOSTNAME -e CI_CS_PORT
          -e CI_CS_USERNAME -e CI_CS_PASSWORD -e HF_TOKEN
          -v ./mount:/workspace/mount
          hidet-ci python hidet/.github/scripts/run_tests.py --configs /workspace/mount/run_configs.json'
        env:
          HW_CONFIG: ${{ matrix.hw_configs }}
          REPO_NAME: ${{ inputs.source_repo == 'this' && github.repository || inputs.source_repo }}
          REPO_BRANCH: ${{ inputs.source_repo == 'this' && github.ref_name || format('pull/{0}', inputs.source_ref) }}
          CI_CS_HOSTNAME: ${{ secrets.CI_CS_HOSTNAME }}
          CI_CS_PORT: ${{ secrets.CI_CS_PORT }}
          CI_CS_USERNAME: ${{ secrets.CI_CS_USERNAME }}
          CI_CS_PASSWORD: ${{ secrets.CI_CS_PASSWORD }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}

      - name: Upload run configs
        uses: actions/upload-artifact@v3
        with:
          name: run_configs_${{ matrix.hw_configs }}
          path: ./mount/run_configs.json
          retention-days: 1
      
      - name: Retrieve commit properties
        id: get_commit_info
        run: |
          cd hidet
          COMMIT_TIME=$(git log -1 --format=%cd --date=format:'%Y-%m-%d %H:%M:%S')
          COMMIT_AUTHOR=$(git log -1 --format=%an)
          COMMIT_SHA=$(git log -1 --format=%H)
          echo "commit_time=$COMMIT_TIME" >> $GITHUB_OUTPUT
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
  
  upload_results:
    runs-on: ubuntu-latest
    needs: [start_instances, run_tests]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: pip install mysql-connector-python

      - name: Download run configs
        uses: actions/download-artifact@v3

      - name: Run main Python script
        run: python ./.github/scripts/upload_results.py
        env:
          REPO_NAME: ${{ inputs.source_repo == 'this' && github.repository || inputs.source_repo }}
          REPO_BRANCH: ${{ inputs.source_repo == 'this' && github.ref_name || format('pull/{0}', inputs.source_ref) }}
          COMMIT_SHA: ${{ needs.run_tests.outputs.commit_sha }}
          COMMIT_TIME: ${{ needs.run_tests.outputs.commit_time }}
          COMMIT_AUTHOR: ${{ needs.run_tests.outputs.commit_author }}
          HW_CONFIGS: ${{ needs.start_instances.outputs.hw_configs }}
          CI_DB_HOSTNAME: ${{ secrets.CI_DB_HOSTNAME }}
          CI_DB_PORT: ${{ secrets.CI_DB_PORT }}
          CI_DB_USERNAME: ${{ secrets.CI_DB_USERNAME }}
          CI_DB_PASSWORD: ${{ secrets.CI_DB_PASSWORD }}

  stop_instances:
    if: inputs.shutdown_instances
    runs-on: ubuntu-latest
    needs: [start_instances, run_tests]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run main Python script
        run: timeout 900 python ./.github/scripts/stop_instances.py
        env:
          STARTED_INSTANCES: ${{ needs.start_instances.outputs.started_instances }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1